syntax = "proto3";
package cashweb.registry;
import "payload.proto";

// AddressEntry is an individual piece of structured data provided by wallet authors.
message AddressEntry {
    // Kind is a hint to wallets as to what type of data to deserialize from the
    // metadata field.
    string kind = 1;
    // The headers is excess metadata that may be useful to a wallet.
    map<string, string> headers = 2;
    // Body of the `Entry`.
    bytes body = 3;
}

// AddressMetadata is the user-specified data that is covered by the users
// signature.
message AddressMetadata {
    // Timestamp allows servers to determine which version of the data is the most
    // recent. Given in milliseconds.
    int64 timestamp = 1;
    // TTL tells us how long this entry should exist before being considered
    // invalid. Given in milliseconds.
    int64 ttl = 2;
    // User specified data. Presumably some conventional data determined by
    // wallet authors.
    repeated AddressEntry entries = 3;
}

// Peer represents a single peer.
message Peer {
    // The URL pointing to the root of the keyserver REST API.
    string url = 1;
}

// A list of peers.
message Peers {
    // A list of peers.
    repeated Peer peers = 1;
}

// Response after putting address metadata to the registry.
message PutSignedPayloadResponse {
    // Transaction IDs of the burn txs.
    repeated bytes txid = 1;
}

// One entry of [`GetMetadataRangeResponse`].
message GetMetadataRangeEntry {
    // Address the [`SignedPayload`] is stored for.
    string address = 1;
    // Signed payload associated with the address.
    cashweb.payload.SignedPayload signed_payload = 2;
}

// Response from getting a range of address metadata.
message GetMetadataRangeResponse {
    // Entries of this response.
    repeated GetMetadataRangeEntry entries = 1;
}
