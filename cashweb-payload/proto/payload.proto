syntax = "proto3";
package cashweb.payload;

// SignedPayload provides integrity, authentication, and non-repuditation by
// providing a standard structure for covering a payload with a signature.
message SignedPayload {
    // The public key associated with the signature.
    bytes pubkey = 1;

    // The signature (signed for public key) covering the payload.
    bytes sig = 2;

    // Supported signature schemes. Default is Schnorr, but can be ECDSA.
    enum SignatureScheme {
        // Schnorr signature scheme.
        SCHNORR = 0;
        // Elliptic curve digital signature scheme.
        ECDSA = 1;
    }

    // The signature scheme used for signing.
    SignatureScheme sig_scheme = 3;

    // The payload covered by the signature.
    bytes payload = 4;

    // The SHA256 hash of the payload.
    bytes payload_hash = 5;

    // Net amount of XPI burned in the transactions associated with this
    // signed payload.
    int64 burn_amount = 6;

    // Transactions which committed to the payload_digest.
    repeated BurnTx burn_txs = 7;
}

// BurnTx represents a transaction and the output which burns some XPI to commit
// to the signed payload. This ensures that some amount was paid to relay a
// message.
message BurnTx {
    // Fully serialized raw transaction which burns some XPI to commit to the
    // message.
    bytes tx = 1;

    // Index of the OP_RETURN output in `tx` which contains the commitment for
    // the signed payload.
    uint32 burn_idx = 2;
}

// Set of auth wrappers for returning multiple items to the client as needed.
message SignedPayloadSet {
    // Set of auth wrappers that can be used in certain get responses
    repeated SignedPayload items = 1;
}
